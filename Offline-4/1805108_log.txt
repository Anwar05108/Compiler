line number1: type_specifier : INT

int

line number1: type_specifier : INT

int

line number1: parameter_list : type_specifier ID

int e

line number2: factor : CONST_INT

2

line number2: unary_expression : factor

2

line number2: term : unary_expression

2

line number2: variable : ID

e

line number2: factor : variable

e

line number2: unary_expression : factor

e

line number2: term : term MULOP unary_expression

2*e

line number2: simple_expression : term

2*e

line number2: expression : simple expression

2*e

line number2: logic_expression : rel_expression

2*e

line number2: expression : logic expression

2*e

line number2: statement : RETURN expression

return 2*e;

line number2: statement_list : statement

return 2*e;

line number3: compound_statement : LCURL statement_list RCURL

{
return 2*e;
}

print all scopes
 ScopeTable: 1_1

11--> < e ,ID >
 ScopeTable: 1

12--> < f ,ID >
line number3: func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

int f ( int e ) {
return 2*e;
}


line number3: unit: function_definition 

int f ( int e ) {
return 2*e;
}


line number3: program:  unit 

int f ( int e ) {
return 2*e;
}


line number5: type_specifier : INT

int

line number5: type_specifier : INT

int

line number5: parameter_list : type_specifier ID

int c

line number5: type_specifier : INT

int

line number5: parameter_list : parameter_list COMMA type_specifier ID

int c,int d

line number6: type_specifier : INT

int

line number6: declaration_list: ID 

x

line number6: variable_declaration: type_specifier declaration_list SEMICOLON 

int x;

line number6: statement : variable_declaration

int x;

line number6: statement_list : statement

int x;

line number7: variable : ID

x

line number7: variable : ID

c

line number7: factor : variable

c

line number7: unary_expression : factor

c

line number7: term : unary_expression

c

line number7: simple_expression : term

c

line number7: expression : simple expression

c

line number7: logic_expression : rel_expression

c

line number7: argument_list : logic_expression

c

line number7: argument_list : arguments

c

line number7: factor : ID LPAREN argument_list RPAREN

f ( c )

line number7: unary_expression : factor

f ( c )

line number7: term : unary_expression

f ( c )

line number7: simple_expression : term

f ( c )

line number7: variable : ID

c

line number7: factor : variable

c

line number7: unary_expression : factor

c

line number7: term : unary_expression

c

line number7: simple_expression : simple_expression ADDOP term

f ( c )+c

line number7: variable : ID

d

line number7: factor : variable

d

line number7: unary_expression : factor

d

line number7: term : unary_expression

d

line number7: simple_expression : simple_expression ADDOP term

f ( c )+c+d

line number7: expression : simple expression

f ( c )+c+d

line number7: logic_expression : rel_expression

f ( c )+c+d

line number7: expression : variable ASSIGNOP logic expression

x=f ( c )+c+d

line number7: expression_statement : expression SEMICOLON

x=f ( c )+c+d;

line number7: statement : expression_statement

x=f ( c )+c+d;

line number7: statement_list : statement_list statement

int x;
x=f ( c )+c+d;

line number8: variable : ID

x

line number8: factor : variable

x

line number8: unary_expression : factor

x

line number8: term : unary_expression

x

line number8: simple_expression : term

x

line number8: expression : simple expression

x

line number8: logic_expression : rel_expression

x

line number8: expression : logic expression

x

line number8: statement : RETURN expression

return x;

line number8: statement_list : statement_list statement

int x;
x=f ( c )+c+d;
return x;

line number9: compound_statement : LCURL statement_list RCURL

{
int x;
x=f ( c )+c+d;
return x;
}

print all scopes
 ScopeTable: 1_2

0--> < x ,ID >
9--> < c ,ID >
10--> < d ,ID >
 ScopeTable: 1

12--> < f ,ID >
13--> < g ,ID >
line number9: func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

int g ( int c,int d ) {
int x;
x=f ( c )+c+d;
return x;
}


line number9: unit: function_definition 

int g ( int c,int d ) {
int x;
x=f ( c )+c+d;
return x;
}


line number9: program: program unit 

int f ( int e ) {
return 2*e;
}

int g ( int c,int d ) {
int x;
x=f ( c )+c+d;
return x;
}


line number11: type_specifier : INT

int

line number12: type_specifier : INT

int

line number12: declaration_list: ID 

a

line number12: declaration_list: declaration_list COMMA ID 

a,b

line number12: variable_declaration: type_specifier declaration_list SEMICOLON 

int a,b;

line number12: statement : variable_declaration

int a,b;

line number12: statement_list : statement

int a,b;

line number13: variable : ID

a

line number13: factor : CONST_INT

1

line number13: unary_expression : factor

1

line number13: term : unary_expression

1

line number13: simple_expression : term

1

line number13: expression : simple expression

1

line number13: logic_expression : rel_expression

1

line number13: expression : variable ASSIGNOP logic expression

a=1

line number13: expression_statement : expression SEMICOLON

a=1;

line number13: statement : expression_statement

a=1;

line number13: statement_list : statement_list statement

int a,b;
a=1;

line number14: variable : ID

b

line number14: factor : CONST_INT

2

line number14: unary_expression : factor

2

line number14: term : unary_expression

2

line number14: simple_expression : term

2

line number14: expression : simple expression

2

line number14: logic_expression : rel_expression

2

line number14: expression : variable ASSIGNOP logic expression

b=2

line number14: expression_statement : expression SEMICOLON

b=2;

line number14: statement : expression_statement

b=2;

line number14: statement_list : statement_list statement

int a,b;
a=1;
b=2;

line number15: variable : ID

a

line number15: variable : ID

a

line number15: factor : variable

a

line number15: unary_expression : factor

a

line number15: term : unary_expression

a

line number15: simple_expression : term

a

line number15: expression : simple expression

a

line number15: logic_expression : rel_expression

a

line number15: argument_list : logic_expression

a

line number15: variable : ID

b

line number15: factor : variable

b

line number15: unary_expression : factor

b

line number15: term : unary_expression

b

line number15: simple_expression : term

b

line number15: expression : simple expression

b

line number15: logic_expression : rel_expression

b

line number15: argument_list : arguments COMMA logic_expression

a,b

line number15: argument_list : arguments

a,b

line number15: factor : ID LPAREN argument_list RPAREN

g ( a,b )

line number15: unary_expression : factor

g ( a,b )

line number15: term : unary_expression

g ( a,b )

line number15: simple_expression : term

g ( a,b )

line number15: expression : simple expression

g ( a,b )

line number15: logic_expression : rel_expression

g ( a,b )

line number15: expression : variable ASSIGNOP logic expression

a=g ( a,b )

line number15: expression_statement : expression SEMICOLON

a=g ( a,b );

line number15: statement : expression_statement

a=g ( a,b );

line number15: statement_list : statement_list statement

int a,b;
a=1;
b=2;
a=g ( a,b );

line number16: statement : PRINTLN LPAREN expression RPAREN SEMICOLON

println(a);

line number16: statement_list : statement_list statement

int a,b;
a=1;
b=2;
a=g ( a,b );
println(a);

line number17: factor : CONST_INT

0

line number17: unary_expression : factor

0

line number17: term : unary_expression

0

line number17: simple_expression : term

0

line number17: expression : simple expression

0

line number17: logic_expression : rel_expression

0

line number17: expression : logic expression

0

line number17: statement : RETURN expression

return 0;

line number17: statement_list : statement_list statement

int a,b;
a=1;
b=2;
a=g ( a,b );
println(a);
return 0;

line number18: compound_statement : LCURL statement_list RCURL

{
int a,b;
a=1;
b=2;
a=g ( a,b );
println(a);
return 0;
}

print all scopes
 ScopeTable: 1_3

7--> < a ,ID >
8--> < b ,ID >
 ScopeTable: 1

12--> < f ,ID >
13--> < g ,ID >
16--> < main ,ID >
line number18: func_definition : type_specifier ID LPAREN RPAREN compound_statement

int main ( ) {
int a,b;
a=1;
b=2;
a=g ( a,b );
println(a);
return 0;
}


line number18: unit: function_definition 

int main ( ) {
int a,b;
a=1;
b=2;
a=g ( a,b );
println(a);
return 0;
}


line number18: program: program unit 

int f ( int e ) {
return 2*e;
}

int g ( int c,int d ) {
int x;
x=f ( c )+c+d;
return x;
}

int main ( ) {
int a,b;
a=1;
b=2;
a=g ( a,b );
println(a);
return 0;
}


line number19: f PROC 
	POP BP
	POP e
	PUSH BP
	mov ax, 2
	mov bx, e
	imul bx
	mov temp_0, ax
	pop bp
	push temp_0
	PUSH BP
	RET
f ENDP
g PROC 
	POP BP
	POP d
	POP c
	PUSH BP
	push ax
	push bx
	push cx
	push dx
	push 
	call f
	pop temp_1
	pop dx
	pop cx
	pop bx
	pop ax
	mov ax, temp_1
	add ax, 
	mov temp_2, ax
	mov ax, temp_2
	add ax, 
	mov temp_3, ax
	mov ax,temp_3
	mov x, ax
	pop bp
	push x
	PUSH BP
	RET
g ENDP
MAIN PROC
MOV AX, @DATA
MOV DS, AX
	mov ax,1
	mov a, ax
	mov ax,2
	mov b, ax
	push ax
	push bx
	push cx
	push dx
	push a
	push b
	call g
	pop temp_4
	pop dx
	pop cx
	pop bx
	pop ax
	mov ax,temp_4
	mov a, ax
	mov ax, a
	mov print_var , ax
	call println
	pop bp
	push 0
MOV AX, 4C00h
INT 21h
MAIN ENDP
END MAIN

start: program
print all scopes
 ScopeTable: 1

12--> < f ,ID >
13--> < g ,ID >
16--> < main ,ID >
total no. of errors: 2
total no. of lines19

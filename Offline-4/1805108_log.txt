line number1: type_specifier : INT

int

line number3: type_specifier : INT

int

line number3: declaration_list: ID 

i

line number3: declaration_list: declaration_list COMMA ID 

i,j

line number3: declaration_list: declaration_list COMMA ID 

i,j,k

line number3: declaration_list: declaration_list COMMA ID 

i,j,k,ll

line number3: variable_declaration: type_specifier declaration_list SEMICOLON 

int i,j,k,ll;

line number3: statement : variable_declaration

int i,j,k,ll;

line number3: statement_list : statement

int i,j,k,ll;

line number5: variable : ID

i

line number5: factor : CONST_INT

0

line number5: unary_expression : factor

0

line number5: term : unary_expression

0

line number5: simple_expression : term

0

line number5: expression : simple expression

0

line number5: logic_expression : rel_expression

0

line number5: expression : variable ASSIGNOP logic expression

i=0

line number5: expression_statement : expression SEMICOLON

i=0;

line number5: variable : ID

i

line number5: factor : variable

i

line number5: unary_expression : factor

i

line number5: term : unary_expression

i

line number5: simple_expression : term

i

line number5: factor : CONST_INT

6

line number5: unary_expression : factor

6

line number5: term : unary_expression

6

line number5: simple_expression : term

6

line number5: expression : simple_expression RELOP simple_expression

i<6

line number5: logic_expression : rel_expression

i<6

line number5: expression : logic expression

i<6

line number5: expression_statement : expression SEMICOLON

i<6;

line number5: variable : ID

i

line number5: factor : variable INCOP

i++

line number5: unary_expression : factor

i++

line number5: term : unary_expression

i++

line number5: simple_expression : term

i++

line number5: expression : simple expression

i++

line number5: logic_expression : rel_expression

i++

line number5: expression : logic expression

i++

line number6: statement : PRINTLN LPAREN expression RPAREN SEMICOLON

println(i);

line number6: statement_list : statement

println(i);

line number7: compound_statement : LCURL statement_list RCURL

{
println(i);
}

print all scopes
 ScopeTable: 1_1_1

 ScopeTable: 1_1

6--> < ll ,ID >
15--> < i ,ID >
16--> < j ,ID >
17--> < k ,ID >
 ScopeTable: 1

16--> < main ,ID >
line number7: statement : compound_statement

{
println(i);
}

line number7: statement : FOR LPAREN expression statement expression statement expression RPAREN statement

for(i=0;i<6;)i++

line number7: statement_list : statement_list statement

int i,j,k,ll;
for(i=0;i<6;)i++

line number9: variable : ID

k

line number9: factor : CONST_INT

4

line number9: unary_expression : factor

4

line number9: term : unary_expression

4

line number9: simple_expression : term

4

line number9: expression : simple expression

4

line number9: logic_expression : rel_expression

4

line number9: expression : variable ASSIGNOP logic expression

k=4

line number9: expression_statement : expression SEMICOLON

k=4;

line number9: statement : expression_statement

k=4;

line number9: statement_list : statement_list statement

int i,j,k,ll;
for(i=0;i<6;)i++
k=4;

line number10: variable : ID

ll

line number10: factor : CONST_INT

6

line number10: unary_expression : factor

6

line number10: term : unary_expression

6

line number10: simple_expression : term

6

line number10: expression : simple expression

6

line number10: logic_expression : rel_expression

6

line number10: expression : variable ASSIGNOP logic expression

ll=6

line number10: expression_statement : expression SEMICOLON

ll=6;

line number10: statement : expression_statement

ll=6;

line number10: statement_list : statement_list statement

int i,j,k,ll;
for(i=0;i<6;)i++
k=4;
ll=6;

line number11: variable : ID

k

line number11: factor : variable

k

line number11: unary_expression : factor

k

line number11: term : unary_expression

k

line number11: simple_expression : term

k

line number11: factor : CONST_INT

0

line number11: unary_expression : factor

0

line number11: term : unary_expression

0

line number11: simple_expression : term

0

line number11: expression : simple_expression RELOP simple_expression

k>0

line number11: logic_expression : rel_expression

k>0

line number11: expression : logic expression

k>0

line number12: variable : ID

ll

line number12: variable : ID

ll

line number12: factor : variable

ll

line number12: unary_expression : factor

ll

line number12: term : unary_expression

ll

line number12: simple_expression : term

ll

line number12: factor : CONST_INT

3

line number12: unary_expression : factor

3

line number12: term : unary_expression

3

line number12: simple_expression : simple_expression ADDOP term

ll+3

line number12: expression : simple expression

ll+3

line number12: logic_expression : rel_expression

ll+3

line number12: expression : variable ASSIGNOP logic expression

ll=ll+3

line number12: expression_statement : expression SEMICOLON

ll=ll+3;

line number12: statement : expression_statement

ll=ll+3;

line number12: statement_list : statement

ll=ll+3;

line number13: variable : ID

k

line number13: factor : variable DECOP

k--

line number13: unary_expression : factor

k--

line number13: term : unary_expression

k--

line number13: simple_expression : term

k--

line number13: expression : simple expression

k--

line number13: logic_expression : rel_expression

k--

line number13: expression : logic expression

k--

line number13: expression_statement : expression SEMICOLON

k--;

line number13: statement : expression_statement

k--;

line number13: statement_list : statement_list statement

ll=ll+3;
k--;

line number14: compound_statement : LCURL statement_list RCURL

{
ll=ll+3;
k--;
}

print all scopes
 ScopeTable: 1_1_2

 ScopeTable: 1_1

6--> < ll ,ID >
15--> < i ,ID >
16--> < j ,ID >
17--> < k ,ID >
 ScopeTable: 1

16--> < main ,ID >
line number14: statement : compound_statement

{
ll=ll+3;
k--;
}

line number14: statement : WHILE LPAREN expression RPAREN statement

while(k>0){
ll=ll+3;
k--;
}

line number14: statement_list : statement_list statement

int i,j,k,ll;
for(i=0;i<6;)i++
k=4;
ll=6;
while(k>0){
ll=ll+3;
k--;
}

line number16: statement : PRINTLN LPAREN expression RPAREN SEMICOLON

println(ll);

line number16: statement_list : statement_list statement

int i,j,k,ll;
for(i=0;i<6;)i++
k=4;
ll=6;
while(k>0){
ll=ll+3;
k--;
}
println(ll);

line number17: statement : PRINTLN LPAREN expression RPAREN SEMICOLON

println(k);

line number17: statement_list : statement_list statement

int i,j,k,ll;
for(i=0;i<6;)i++
k=4;
ll=6;
while(k>0){
ll=ll+3;
k--;
}
println(ll);
println(k);

line number19: variable : ID

k

line number19: factor : CONST_INT

4

line number19: unary_expression : factor

4

line number19: term : unary_expression

4

line number19: simple_expression : term

4

line number19: expression : simple expression

4

line number19: logic_expression : rel_expression

4

line number19: expression : variable ASSIGNOP logic expression

k=4

line number19: expression_statement : expression SEMICOLON

k=4;

line number19: statement : expression_statement

k=4;

line number19: statement_list : statement_list statement

int i,j,k,ll;
for(i=0;i<6;)i++
k=4;
ll=6;
while(k>0){
ll=ll+3;
k--;
}
println(ll);
println(k);
k=4;

line number20: variable : ID

ll

line number20: factor : CONST_INT

6

line number20: unary_expression : factor

6

line number20: term : unary_expression

6

line number20: simple_expression : term

6

line number20: expression : simple expression

6

line number20: logic_expression : rel_expression

6

line number20: expression : variable ASSIGNOP logic expression

ll=6

line number20: expression_statement : expression SEMICOLON

ll=6;

line number20: statement : expression_statement

ll=6;

line number20: statement_list : statement_list statement

int i,j,k,ll;
for(i=0;i<6;)i++
k=4;
ll=6;
while(k>0){
ll=ll+3;
k--;
}
println(ll);
println(k);
k=4;
ll=6;

line number22: variable : ID

k

line number22: factor : variable DECOP

k--

line number22: unary_expression : factor

k--

line number22: term : unary_expression

k--

line number22: simple_expression : term

k--

line number22: expression : simple expression

k--

line number22: logic_expression : rel_expression

k--

line number22: expression : logic expression

k--

line number23: variable : ID

ll

line number23: variable : ID

ll

line number23: factor : variable

ll

line number23: unary_expression : factor

ll

line number23: term : unary_expression

ll

line number23: simple_expression : term

ll

line number23: factor : CONST_INT

3

line number23: unary_expression : factor

3

line number23: term : unary_expression

3

line number23: simple_expression : simple_expression ADDOP term

ll+3

line number23: expression : simple expression

ll+3

line number23: logic_expression : rel_expression

ll+3

line number23: expression : variable ASSIGNOP logic expression

ll=ll+3

line number23: expression_statement : expression SEMICOLON

ll=ll+3;

line number23: statement : expression_statement

ll=ll+3;

line number23: statement_list : statement

ll=ll+3;

line number24: compound_statement : LCURL statement_list RCURL

{
ll=ll+3;
}

print all scopes
 ScopeTable: 1_1_3

 ScopeTable: 1_1

6--> < ll ,ID >
15--> < i ,ID >
16--> < j ,ID >
17--> < k ,ID >
 ScopeTable: 1

16--> < main ,ID >
line number24: statement : compound_statement

{
ll=ll+3;
}

line number24: statement : WHILE LPAREN expression RPAREN statement

while(k--){
ll=ll+3;
}

line number24: statement_list : statement_list statement

int i,j,k,ll;
for(i=0;i<6;)i++
k=4;
ll=6;
while(k>0){
ll=ll+3;
k--;
}
println(ll);
println(k);
k=4;
ll=6;
while(k--){
ll=ll+3;
}

line number26: statement : PRINTLN LPAREN expression RPAREN SEMICOLON

println(ll);

line number26: statement_list : statement_list statement

int i,j,k,ll;
for(i=0;i<6;)i++
k=4;
ll=6;
while(k>0){
ll=ll+3;
k--;
}
println(ll);
println(k);
k=4;
ll=6;
while(k--){
ll=ll+3;
}
println(ll);

line number27: statement : PRINTLN LPAREN expression RPAREN SEMICOLON

println(k);

line number27: statement_list : statement_list statement

int i,j,k,ll;
for(i=0;i<6;)i++
k=4;
ll=6;
while(k>0){
ll=ll+3;
k--;
}
println(ll);
println(k);
k=4;
ll=6;
while(k--){
ll=ll+3;
}
println(ll);
println(k);

line number30: factor : CONST_INT

0

line number30: unary_expression : factor

0

line number30: term : unary_expression

0

line number30: simple_expression : term

0

line number30: expression : simple expression

0

line number30: logic_expression : rel_expression

0

line number30: expression : logic expression

0

line number30: statement : RETURN expression

return 0;

line number30: statement_list : statement_list statement

int i,j,k,ll;
for(i=0;i<6;)i++
k=4;
ll=6;
while(k>0){
ll=ll+3;
k--;
}
println(ll);
println(k);
k=4;
ll=6;
while(k--){
ll=ll+3;
}
println(ll);
println(k);
return 0;

line number31: compound_statement : LCURL statement_list RCURL

{
int i,j,k,ll;
for(i=0;i<6;)i++
k=4;
ll=6;
while(k>0){
ll=ll+3;
k--;
}
println(ll);
println(k);
k=4;
ll=6;
while(k--){
ll=ll+3;
}
println(ll);
println(k);
return 0;
}

print all scopes
 ScopeTable: 1_1

6--> < ll ,ID >
15--> < i ,ID >
16--> < j ,ID >
17--> < k ,ID >
 ScopeTable: 1

16--> < main ,ID >
line number31: func_definition : type_specifier ID LPAREN RPAREN compound_statement

int main ( ) {
int i,j,k,ll;
for(i=0;i<6;)i++
k=4;
ll=6;
while(k>0){
ll=ll+3;
k--;
}
println(ll);
println(k);
k=4;
ll=6;
while(k--){
ll=ll+3;
}
println(ll);
println(k);
return 0;
}


line number31: unit: function_definition 

int main ( ) {
int i,j,k,ll;
for(i=0;i<6;)i++
k=4;
ll=6;
while(k>0){
ll=ll+3;
k--;
}
println(ll);
println(k);
k=4;
ll=6;
while(k--){
ll=ll+3;
}
println(ll);
println(k);
return 0;
}


line number31: program:  unit 

int main ( ) {
int i,j,k,ll;
for(i=0;i<6;)i++
k=4;
ll=6;
while(k>0){
ll=ll+3;
k--;
}
println(ll);
println(k);
k=4;
ll=6;
while(k--){
ll=ll+3;
}
println(ll);
println(k);
return 0;
}


line number32: MAIN PROC
MOV AX, @DATA
MOV DS, AX
;for loop
 ; assignment expression:i=0
	mov ax,0
	mov i1_1, ax
label_2: 
 ; Relational Operation: i<6
	mov ax, i1_1
	cmp ax, 6
	jl label_1
	mov ax, 0
	mov temp_0, ax
	jmp label_0
label_1:
	mov ax, 1
	mov temp_0, ax
label_0:
mov ax, temp_0
	cmp ax, 0
	je label_3
 ; println(i)
	mov ax, i1_1
	mov print_var , ax
	call println
; increment: i++
	mov ax ,i1_1
	mov temp_1, ax
	inc i1_1
jmp label_2
label_3: 
 ; assignment expression:k=4
	mov ax,4
	mov k1_1, ax
 ; assignment expression:ll=6
	mov ax,6
	mov ll1_1, ax
;while loop
label_6: 
 ; Relational Operation: k>0
	mov ax, k1_1
	cmp ax, 0
	jg label_5
	mov ax, 0
	mov temp_2, ax
	jmp label_4
label_5:
	mov ax, 1
	mov temp_2, ax
label_4:
	mov ax, temp_2
	cmp ax, 0
	je label_7
 ; assignment expression:ll=ll+3
	mov ax, ll1_1
	add ax, 3
	mov temp_3, ax
	mov ax,temp_3
	mov ll1_1, ax
; decrement: k--
	mov ax,k1_1
	mov temp_4, ax
	dec k1_1
jmp label_6
label_7: 
 ; println(ll)
	mov ax, ll1_1
	mov print_var , ax
	call println
 ; println(k)
	mov ax, k1_1
	mov print_var , ax
	call println
 ; assignment expression:k=4
	mov ax,4
	mov k1_1, ax
 ; assignment expression:ll=6
	mov ax,6
	mov ll1_1, ax
;while loop
label_8: 
; decrement: k--
	mov ax,k1_1
	mov temp_5, ax
	dec k1_1
	mov ax, temp_5
	cmp ax, 0
	je label_9
 ; assignment expression:ll=ll+3
	mov ax, ll1_1
	add ax, 3
	mov temp_6, ax
	mov ax,temp_6
	mov ll1_1, ax
jmp label_8
label_9: 
 ; println(ll)
	mov ax, ll1_1
	mov print_var , ax
	call println
 ; println(k)
	mov ax, k1_1
	mov print_var , ax
	call println
	pop bp
	push 0
MOV AX, 4C00h
INT 21h
MAIN ENDP
END MAIN

start: program
print all scopes
 ScopeTable: 1

16--> < main ,ID >
total no. of errors: 0
total no. of lines32

line number1: type_specifier : INT

int

line number2: type_specifier : INT

int

line number2: declaration_list: ID 

a

line number2: declaration_list: declaration_list COMMA ID 

a,b

line number2: declaration_list: declaration_list COMMA ID 

a,b,c

line number2: declaration_list: declaration_list COMMA ID 

a,b,c,i

line number2: variable_declaration: type_specifier declaration_list SEMICOLON 

int a,b,c,i;

line number2: statement : variable_declaration

int a,b,c,i;

line number2: statement_list : statement

int a,b,c,i;

line number3: variable : ID

b

line number3: factor : CONST_INT

0

line number3: unary_expression : factor

0

line number3: term : unary_expression

0

line number3: simple_expression : term

0

line number3: expression : simple expression

0

line number3: logic_expression : rel_expression

0

line number3: expression : variable ASSIGNOP logic expression

b=0

line number3: expression_statement : expression SEMICOLON

b=0;

line number3: statement : expression_statement

b=0;

line number3: statement_list : statement_list statement

int a,b,c,i;
b=0;

line number4: variable : ID

c

line number4: factor : CONST_INT

1

line number4: unary_expression : factor

1

line number4: term : unary_expression

1

line number4: simple_expression : term

1

line number4: expression : simple expression

1

line number4: logic_expression : rel_expression

1

line number4: expression : variable ASSIGNOP logic expression

c=1

line number4: expression_statement : expression SEMICOLON

c=1;

line number4: statement : expression_statement

c=1;

line number4: statement_list : statement_list statement

int a,b,c,i;
b=0;
c=1;

line number5: variable : ID

i

line number5: factor : CONST_INT

0

line number5: unary_expression : factor

0

line number5: term : unary_expression

0

line number5: simple_expression : term

0

line number5: expression : simple expression

0

line number5: logic_expression : rel_expression

0

line number5: expression : variable ASSIGNOP logic expression

i=0

line number5: expression_statement : expression SEMICOLON

i=0;

line number5: variable : ID

i

line number5: factor : variable

i

line number5: unary_expression : factor

i

line number5: term : unary_expression

i

line number5: simple_expression : term

i

line number5: factor : CONST_INT

4

line number5: unary_expression : factor

4

line number5: term : unary_expression

4

line number5: simple_expression : term

4

line number5: expression : simple_expression RELOP simple_expression

i<4

line number5: logic_expression : rel_expression

i<4

line number5: expression : logic expression

i<4

line number5: expression_statement : expression SEMICOLON

i<4;

line number5: variable : ID

i

line number5: factor : variable INCOP

i++

line number5: unary_expression : factor

i++

line number5: term : unary_expression

i++

line number5: simple_expression : term

i++

line number5: expression : simple expression

i++

line number5: logic_expression : rel_expression

i++

line number5: expression : logic expression

i++

line number6: variable : ID

a

line number6: factor : CONST_INT

3

line number6: unary_expression : factor

3

line number6: term : unary_expression

3

line number6: simple_expression : term

3

line number6: expression : simple expression

3

line number6: logic_expression : rel_expression

3

line number6: expression : variable ASSIGNOP logic expression

a=3

line number6: expression_statement : expression SEMICOLON

a=3;

line number6: statement : expression_statement

a=3;

line number6: statement_list : statement

a=3;

line number7: variable : ID

a

line number7: factor : variable DECOP

a--

line number7: unary_expression : factor

a--

line number7: term : unary_expression

a--

line number7: simple_expression : term

a--

line number7: expression : simple expression

a--

line number7: logic_expression : rel_expression

a--

line number7: expression : logic expression

a--

line number8: variable : ID

b

line number8: factor : variable INCOP

b++

line number8: unary_expression : factor

b++

line number8: term : unary_expression

b++

line number8: simple_expression : term

b++

line number8: expression : simple expression

b++

line number8: logic_expression : rel_expression

b++

line number8: expression : logic expression

b++

line number8: expression_statement : expression SEMICOLON

b++;

line number8: statement : expression_statement

b++;

line number8: statement_list : statement

b++;

line number9: compound_statement : LCURL statement_list RCURL

{
b++;
}

print all scopes
 ScopeTable: 1.1.1.1

 ScopeTable: 1.1.1

 ScopeTable: 1.1

7--> < a ,ID >
8--> < b ,ID >
9--> < c ,ID >
15--> < i ,ID >
 ScopeTable: 1

16--> < main ,ID >
line number9: statement : compound_statement

{
b++;
}

line number9: statement : WHILE LPAREN expression RPAREN statement

while(a--){
b++;
}

line number9: statement_list : statement_list statement

a=3;
while(a--){
b++;
}

line number10: compound_statement : LCURL statement_list RCURL

{
a=3;
while(a--){
b++;
}
}

print all scopes
 ScopeTable: 1.1.1

 ScopeTable: 1.1

7--> < a ,ID >
8--> < b ,ID >
9--> < c ,ID >
15--> < i ,ID >
 ScopeTable: 1

16--> < main ,ID >
line number10: statement : compound_statement

{
a=3;
while(a--){
b++;
}
}

line number10: statement : FOR LPAREN expression statement expression statement expression RPAREN statement

for(i=0;i<4;)i++

line number10: statement_list : statement_list statement

int a,b,c,i;
b=0;
c=1;
for(i=0;i<4;)i++

line number11: statement : PRINTLN LPAREN expression RPAREN SEMICOLON

println(a);

line number11: statement_list : statement_list statement

int a,b,c,i;
b=0;
c=1;
for(i=0;i<4;)i++
println(a);

line number12: statement : PRINTLN LPAREN expression RPAREN SEMICOLON

println(b);

line number12: statement_list : statement_list statement

int a,b,c,i;
b=0;
c=1;
for(i=0;i<4;)i++
println(a);
println(b);

line number13: statement : PRINTLN LPAREN expression RPAREN SEMICOLON

println(c);

line number13: statement_list : statement_list statement

int a,b,c,i;
b=0;
c=1;
for(i=0;i<4;)i++
println(a);
println(b);
println(c);

line number14: compound_statement : LCURL statement_list RCURL

{
int a,b,c,i;
b=0;
c=1;
for(i=0;i<4;)i++
println(a);
println(b);
println(c);
}

print all scopes
 ScopeTable: 1.1

7--> < a ,ID >
8--> < b ,ID >
9--> < c ,ID >
15--> < i ,ID >
 ScopeTable: 1

16--> < main ,ID >
line number14: func_definition : type_specifier ID LPAREN RPAREN compound_statement

int main ( ) {
int a,b,c,i;
b=0;
c=1;
for(i=0;i<4;)i++
println(a);
println(b);
println(c);
}


line number14: unit: function_definition 

int main ( ) {
int a,b,c,i;
b=0;
c=1;
for(i=0;i<4;)i++
println(a);
println(b);
println(c);
}


line number14: program:  unit 

int main ( ) {
int a,b,c,i;
b=0;
c=1;
for(i=0;i<4;)i++
println(a);
println(b);
println(c);
}


line number14: MAIN PROC
MOV AX, @DATA
MOV DS, AX
	mov ax,0
	mov b, ax
	mov ax,1
	mov c, ax
	mov ax,0
	mov i, ax
label_4: 
	mov ax, i
	cmp ax, 4
	jl label_1
	mov ax, 0
	mov temp_0, ax
	jmp label_0
label_1:
	mov ax, 1
	mov temp_0, ax
label_0:
mov ax, temp_0
	cmp ax, 0
	je label_5
	mov ax,3
	mov a, ax
label_2: 
	mov ax,a
	mov temp_2, ax
	deca
	mov ax, temp_2
	cmp ax, 0
	je label_3
	mov ax ,b
	mov temp_3, ax
	inc b
jmp label_2
label_3: 
	mov ax ,i
	mov temp_1, ax
	inc i
jmp label_4
label_5: 
	mov ax, a
	mov print_var , ax
	call println
	mov ax, b
	mov print_var , ax
	call println
	mov ax, c
	mov print_var , ax
	call println
MOV AX, 4C00h
INT 21h
MAIN ENDP
END MAIN

start: program
print all scopes
 ScopeTable: 1

16--> < main ,ID >
total no. of errors: 0
total no. of lines14
